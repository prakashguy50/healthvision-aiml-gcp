package com.healthvision.imageservice.service;

import com.google.cloud.storage.BlobId;
import com.google.cloud.storage.BlobInfo;
import com.google.cloud.storage.Storage;
import com.healthvision.imageservice.model.*;
import com.healthvision.imageservice.repository.ImageRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.UUID;

@Slf4j
@Service
@RequiredArgsConstructor
public class ImageService {
    private final ImageRepository repository;
    private final MLServiceClient mlClient;
    private final Storage storage;
    private final String bucketName = "healthvision-data-bucket";

    public ImageAnalysis processImage(MultipartFile file, String patientId) throws IOException {
        String imageId = UUID.randomUUID().toString();
        String gcsPath = storeInGcs(file, imageId);
        
        ImageFeatures features = extractFeatures(file);
        MLResult mlResult = mlClient.predict(features);
        
        MedicalImage image = MedicalImage.builder()
            .id(imageId)
            .patientId(patientId)
            .originalPath(gcsPath)
            .findings(mlResult.getFindings())
            .build();
        
        repository.save(image);
        return new ImageAnalysis(imageId, mlResult);
    }

    private String storeInGcs(MultipartFile file, String imageId) throws IOException {
        String objectName = "images/" + imageId + ".dcm";
        BlobId blobId = BlobId.of(bucketName, objectName);
        BlobInfo blobInfo = BlobInfo.newBuilder(blobId).build();
        storage.create(blobInfo, file.getBytes());
        return "gs://" + bucketName + "/" + objectName;
    }

    private ImageFeatures extractFeatures(MultipartFile file) {
        // Implement DICOM feature extraction logic
        return new ImageFeatures();
    }
}